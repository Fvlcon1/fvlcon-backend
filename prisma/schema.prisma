generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaTypes {
  image
  video
}

enum StatusTypes {
  failed
  successful
}

model User {
id                    String                @id @default(cuid())
  firstName           String                @db.VarChar(255)
  lastName            String                @db.VarChar(255)
  email               String                @unique
  password            String
  companyCode         String                @db.VarChar(50)
  emailVerified       Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  stream              Stream[]
  TwoFactor           TwoFactor[]
  Verification        Verification[]
  cameraFolder        CameraFolder[]
  fvlconizationLogs   FvlconizationLogs[]
  segmentationLogs    SegmentationLogs[]
  plateTracking       PlateTracking[]
  personTracking              PersonTracking[]
  fvlconizationVideoLogs      FvlconizationVideoLogs[]
}

model Verification {
  id               String   @id
  verificationCode String
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  userId           String
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stream {
  id      String @id @default(cuid())
  name    String
  userId  String
  rtspurl String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cameraFolderId      String
  cameraFolder        CameraFolder      @relation(fields: [cameraFolderId], references: [id])

  @@unique([id, name])
}

model TwoFactor {
  id            String   @id @default(cuid())
  userId        String
  twoFactorCode String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CameraFolder {
  id            String   @id @default(cuid())
  name          String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream        Stream[]
}

model FvlconizationLogs {
  id                      String           @id @default(cuid())
  type                    MediaTypes
  media                   Json[]
  uploadedImageS3key      String
  date                    DateTime
  timeElapsed             Int
  status                  StatusTypes     
  userId                  String
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SegmentationLogs {
  id                      String           @id @default(cuid())
  type                    MediaTypes
  media                   Json[]
  uploadedImageS3key      String
  date                    DateTime
  timeElapsed             Int
  status                  StatusTypes  
  userId                  String
  user                    User            @relation(fields: [userId], references: [id], onDelete: Cascade)   
}

model PlateTracking {
  id                      String                  @id @default(cuid())
  plateLogId              String
  date                    DateTime
  locations               String[]
  userId                  String
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PersonTracking {
  id                      String                  @id @default(cuid())
  personLogId             String?
  date                    DateTime
  locations               String[]
  userId                  String
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FvlconizationVideoLogs {
  id             String      @id
  date           DateTime
  timeElapsed    Int
  status         StatusTypes
  userId         String
  occurance      Json[]
  thumbnailS3Key String
  videoS3Key     String
  User           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CriminalRecord {
  id                      String                  @id @default(cuid())
  personId                String
  arrestDate              DateTime
  arrestingOfficer        String
  criminalRecordId        String
  offenceTypee            String
  sentenceLengthMonths    Int
  niaTableId              String
}