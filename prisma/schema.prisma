generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaTypes {
  image
  video
}

enum StatusTypes {
  failed
  successful
}

model User {
  id            String         @id @default(cuid())
  firstName     String         @db.VarChar(255)
  lastName      String         @db.VarChar(255)
  email         String         @unique
  password      String
  companyCode   String         @db.VarChar(50)
  emailVerified Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  stream        Stream[]
  TwoFactor     TwoFactor[]
  Verification  Verification[]
  cameraFolder  CameraFolder[]
}

model Verification {
  id               String   @id
  verificationCode String
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  userId           String
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stream {
  id      String @id @default(cuid())
  name    String
  userId  String
  rtspurl String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cameraFolderId      String
  cameraFolder        CameraFolder      @relation(fields: [cameraFolderId], references: [id])

  @@unique([id, name])
}

model TwoFactor {
  id            String   @id @default(cuid())
  userId        String
  twoFactorCode String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CameraFolder {
  id            String   @id @default(cuid())
  name          String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream        Stream[]
}

model FvlconizationLogs {
  id                      String           @id @default(cuid())
  type                    MediaTypes
  uploadMedia             String[]
  identifiedPersonFaceId  String
  date                    DateTime
  location                String
  accuracy                Int
  timeElapsed             Int
  status                  StatusTypes     
}

model SegmentationLogs {
  id                      String           @id @default(cuid())
  type                    MediaTypes
  uploadMedia             String[]
  segmentationMedia       String[]
  date                    DateTime
  location                String
  accuracy                Int
  timeElapsed             Int
  status                  StatusTypes     
}

model PersonLiveVision {
  id                      String           @id @default(cuid())
  capturedImage           String
  identifiedPersonFaceId  String
  date                    DateTime
  location                String
  accuracy                Int

  personTracking          PersonTracking[]
}

model PlateLiveVision {
  id                      String           @id @default(cuid())
  capturedImage           String
  owner                   String
  date                    DateTime
  location                String
  plateNumber             String

  plateTrackingLogs       PlateTracking[]
}

model PlateTracking {
  id                      String                  @id @default(cuid())
  plateLogId              String
  plateLog                PlateLiveVision         @relation(fields: [plateLogId], references: [id])
  date                    DateTime
  location                String
}

model PersonTracking {
  id                      String                  @id @default(cuid())
  personLogId             String
  personLog               PersonLiveVision        @relation(fields: [personLogId], references: [id])
  date                    DateTime
  location                String
}